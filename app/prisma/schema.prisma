// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Link {
    id               String             @id @default(cuid())
    title            String
    description      String? // @db.Text
    href             String
    tags             Tag[]
    LinkUserKeyValue LinkUserKeyValue[]
}

model Tag {
    id          String  @id @default(cuid())
    title       String
    description String? // @db.Text
    links       Link[]
}

model LinkUserKeyValue {
    linkId  String
    link    Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
    userId  String
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    key     String
    value   String?
    updated DateTime @updatedAt

    @@id([linkId, userId, key])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String             @id @default(cuid())
    name             String?
    email            String?            @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    LinkUserKeyValue LinkUserKeyValue[]
    role             Int                @default(0) // 0 = Guest, 1 = Member, 2 = Admin
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
